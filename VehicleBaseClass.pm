#!/usr/local/bin/perl
#####################################################################################
#
#	VehicleBaseClass:	Vehicle Base Class
#
#	author:	Fred Bulah
#	email:	fredbulah@comcast.net
#	Git:     https://github.com/fredbulah/PerlExamples
#
#####################################################################################

package VehicleBaseClass;

use Carp;
use strict;
use warnings;
use lib '.';
	
our $AUTOLOAD;

#####################################################################################
#	constructor
#####################################################################################
sub new
{
	my $class = shift;
	my $self = {
		_make  => shift,
		_model => shift,
		_year  => shift,
	};
	print "Make: $self->{_make}\n";
	print "Model:$self->{_model}\n";
	print "Year: $self->{_year}\n";
	bless $self, $class;
	return $self;
}

#####################################################################################
#
#	getters/setters
#
#####################################################################################

#####################################################################################
#	setMake
#####################################################################################
sub setMake 
{
	my ( $self, $make ) = @_;
	$self->{_make} = $make if defined($make);
	return $self->{_make};
}

#####################################################################################
#	getMake 
#####################################################################################
sub getMake 
{
	my( $self ) = @_;
	return $self->{_make};
}

#####################################################################################
#	setModel
#####################################################################################
sub setModel 
{
	my ( $self, $model ) = @_;
	$self->{_model} = $model if defined($model);
	return $self->{_model};
}

#####################################################################################
#	getModel 
#####################################################################################
sub getModel 
{
	my( $self ) = @_;
	return $self->{_model};
}

#####################################################################################
#	setYear
#####################################################################################
sub setYear 
{
	my ( $self, $year ) = @_;
	$self->{_year} = $year if defined($year);
	return $self->{_year};
}

#####################################################################################
#	getYear 
#####################################################################################
sub getYear 
{
	my( $self ) = @_;
	return $self->{_year};
}

#####################################################################################
#	id
#####################################################################################
sub id 
{
	my ($self) = @_;
	print "VehicleBaseClass\n";
	return;
}
	
#####################################################################################
#	AUTOLOAD: catch any calls to undefined methods
#####################################################################################
sub UNIVERSAL::AUTOLOAD 
{

	my $self = shift;

	$UNIVERSAL::AUTOLOAD =~ /.*::(.*)/;

	return if $1 eq "DESTROY";

	if (@_) 
		{
		$self->{$1} = shift;
		}

	$self->{$1};
}

#####################################################################################
#	DESTROY: destructor
#####################################################################################
sub DESTROY
{
	print "VehicleBaseClass::DESTROY called\n";
}


1;
